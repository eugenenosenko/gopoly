// Code generated by gopoly. DO NOT EDIT.
package github.com/eugenenosenko/gopoly/internal/models

import (
    "bytes"
    "encoding/json"
    "fmt"
)

func UnmarshalAdvertJSON(data []byte) (Advert, error) {
	if len(data) == 0 || bytes.Equal(data, []byte("null")) {
		return nil, nil
	}
	var probe struct {
		Discriminator string `json:"type"`
	}
	if err := json.Unmarshal(data, &probe); err != nil {
		return nil, fmt.Errorf("unmarshal AdvertBase type: %w", err)
	}
	switch probe.Discriminator {
    case "SELL":
        var v SellAdvert
        if err := json.Unmarshal(data, &v); err != nil {
            return nil, fmt.Errorf("unmarshal 'SellAdvert': %w", err)
        }
        return &v, nil
	default:
		return nil, fmt.Errorf("could not unmarshal 'Advert': unknown variant %q", probe.Discriminator)
	}
}

// UnmarshalJSON JSON marshaler implementations for SellAdvert containing polymorphic fields.
func (v *SellAdvert) UnmarshalJSON(b []byte) error {
	var data struct {
		SellAdvert
		Runner json.RawMessage`json:"sell"`
	}
	if err := json.Unmarshal(b, &data); err != nil {
		return fmt.Errorf("unmarshal SellAdvert: %v", err)
	}

	runnerField, err := UnmarshalAdvertJSON(data.Runner)
	if err != nil {
		return fmt.Errorf("unmarshal SellAdvert.Runner: %v", err)
	}

	*v = data.SellAdvert
	v.Runner = runnerField
	return nil
}

var _ json.Unmarshaler = (*SellAdvert)(nil)
